{"version":3,"sources":["components/About.js","components/Splash.js","components/TopBar.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["About","props","react_default","a","createElement","src","logo","className","alt","Splash","withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","classes","AppBar_default","position","Toolbar_default","Typography_default","variant","color","App","console","log","process","components_TopBar","BrowserRouter","Link","to","Switch","Route","exact","path","render","components_Splash","components_About","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"iQAyBeA,EAtBD,SAACC,GAOb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,mFAGAF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,KAAMC,UAAU,WAAWC,IAAI,WCUtCC,EAvBA,SAACR,GAOd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,2JAIAF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,KAAMC,UAAU,WAAWC,IAAI,sECqBtCE,uBA9BA,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,GAEZE,WAAY,CACVC,YAAa,GACbC,YAAa,KAqBFN,CAjBA,SAACT,GAAU,IAChBgB,EAAYhB,EAAZgB,QACR,OACEf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAQgB,SAAS,UACfjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,KACED,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAYmB,QAAQ,KAAKC,MAAM,UAAUhB,UAAWU,EAAQJ,MAA5D,6BCWOW,2LAzBX,OADAC,QAAQC,IAAI,2BAA4BC,kBAEtCzB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACA3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMvB,UAAU,WAAWwB,GAAKJ,yBAAhC,UACAzB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMvB,UAAU,WAAWwB,GAAKJ,wBAAhC,WAGJzB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOC,OAAO,EAAMC,KAAOR,kBAA+BS,OAAS,SAACnC,GAAD,OAAWC,EAAAC,EAAAC,cAACiC,EAAD,CAAQ/B,KAAMA,SAC5FJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOC,OAAO,EAAMC,KAAOR,wBAAqCS,OAAS,SAACnC,GAAD,OAAWC,EAAAC,EAAAC,cAACiC,EAAD,CAAQ/B,KAAMA,SAClGJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOE,KAAOR,uBAAoCS,OAAS,SAACnC,GAAD,OAAWC,EAAAC,EAAAC,cAACkC,EAAD,CAAOhC,KAAMA,qBAlB/EiC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAOlC,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c0a45c6d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst About = (props) => {\n\n  /**\n   * @description Stateless component to generate the About page\n   * @returns {HTMLDivElement} About page\n   * @memberof About\n   */\n  return (\n    <div>\n      <h1>We are all about React</h1>\n      <p>\n        This where you would normally find information about the app and team.\n      </p>\n      <img src={props.logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  )\n}\n\nAbout.propTypes = {\n  logo: PropTypes.string.isRequired\n}\n\nexport default About;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Splash = (props) => {\n\n  /**\n   * @description Stateless component to generate the Splash page\n   * @returns {HTMLDivElement} Splash page\n   * @memberof Splash\n   */\n  return (\n    <div>\n      <h1>Welcome to React!</h1>\n      <p>\n        This is our awesome, although unadorned, app splash page. We will make\n        this fancy at some point, but at this point it is merely a placeholder.\n      </p>\n      <img src={props.logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  )\n}\n\nSplash.propTypes = {\n  logo: PropTypes.string.isRequired\n}\n\nexport default Splash;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\nconst TopBar = (props) => {\n  const { classes } = props;\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          React on GitHub Pages\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nTopBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TopBar);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\n\nimport About from './components/About';\nimport Splash from './components/Splash';\nimport TopBar from './components/TopBar';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    console.log('Attempt: A / PUBLIC_URL:', process.env.PUBLIC_URL);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TopBar />\n          <BrowserRouter>\n          <div>\n            <nav>\n              <span>\n                <Link className=\"App-link\" to={ process.env.PUBLIC_URL + \"/splash\" }>Splash</Link>\n                <Link className=\"App-link\" to={ process.env.PUBLIC_URL + \"/about\" }>About</Link>\n              </span>\n            </nav>\n            <Switch>\n              <Route exact={true} path={ process.env.PUBLIC_URL + \"/\" } render={ (props) => <Splash logo={logo} /> } />\n              <Route exact={true} path={ process.env.PUBLIC_URL + \"/splash\" } render={ (props) => <Splash logo={logo} /> } />\n              <Route path={ process.env.PUBLIC_URL + \"/about\" } render={ (props) => <About logo={logo} /> } />\n            </Switch>\n          </div>\n        </BrowserRouter>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}